name: PostgreSQL Database Tests

on: 
  workflow_dispatch:
    branches: [github-actions]
  push:
    branches: [github-actions]

env:
  DB_DATABASE: my_db_test
  DB_USER: root
  DB_PASSWORD: root
  DB_HOST: 127.0.0.1
  DB_PORT: 3306

jobs:
  dbsetup:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # py-db-module: ["pymysql", "pyodbc", "pymssql", "MySQLdb"]
        include:
          - db-name: Psycopg
            py-db-module: psycopg2
            pip-install: psycopg2
    
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_DB: postgres_db
          POSTGRES_USER: postgres_user
          POSTGRES_PASSWORD: postgres_pwd
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

    - name: Install ODBC driver for PostgreSQL
      run: |
        echo "*** apt-get install the driver"
        sudo apt-get install --yes odbc-postgresql
        echo '*** ls -l /usr/lib/x86_64-linux-gnu/odbc'
        ls -l /usr/lib/x86_64-linux-gnu/odbc || true
        echo '*** add full paths to Postgres .so files in /etc/odbcinst.ini'
        sudo sed -i 's|Driver=psqlodbca.so|Driver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so|g' /etc/odbcinst.ini
        sudo sed -i 's|Driver=psqlodbcw.so|Driver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so|g' /etc/odbcinst.ini
        sudo sed -i 's|Setup=libodbcpsqlS.so|Setup=/usr/lib/x86_64-linux-gnu/odbc/libodbcpsqlS.so|g' /etc/odbcinst.ini

      - name: Install ODBC driver for PostgreSQL
        run: |
          echo "*** apt-get install the driver"
          sudo apt-get install --yes odbc-postgresql
          echo '*** ls -l /usr/lib/x86_64-linux-gnu/odbc'
          ls -l /usr/lib/x86_64-linux-gnu/odbc || true
          echo '*** add full paths to Postgres .so files in /etc/odbcinst.ini'
          sudo sed -i 's|Driver=psqlodbca.so|Driver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so|g' /etc/odbcinst.ini
          sudo sed -i 's|Driver=psqlodbcw.so|Driver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so|g' /etc/odbcinst.ini
          sudo sed -i 's|Setup=libodbcpsqlS.so|Setup=/usr/lib/x86_64-linux-gnu/odbc/libodbcpsqlS.so|g' /etc/odbcinst.ini

      - name: Check ODBC setup
        run: |
          echo "*** odbcinst -j"
          odbcinst -j
          echo "*** cat /etc/odbcinst.ini"
          cat /etc/odbcinst.ini
          echo "*** cat /etc/odbc.ini"
          cat /etc/odbc.ini
          echo '*** ls -l /opt/microsoft/msodbcsql17/lib64'
          ls -l /opt/microsoft/msodbcsql17/lib64 || true
          echo '*** ls -l /usr/lib/x86_64-linux-gnu/odbc'
          ls -l /usr/lib/x86_64-linux-gnu/odbc || true

    - name: Create test database in PostgreSQL
      run: |
        echo "*** get version"
        psql -c "SELECT version()"
        echo "*** create database"
        psql -c "CREATE DATABASE test WITH encoding='UTF8' LC_COLLATE='en_US.utf8' LC_CTYPE='en_US.utf8'"
        echo "*** list databases"
        psql -l
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGDATABASE: postgres_db
        PGUSER: postgres_user
        PGPASSWORD: postgres_pwd

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.7'

      - name: Setup Python Packaging and Pip
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: Setup Robot Framework
        run: |
          pip install robotframework

      - name: Install Development/Checked out version of DatabaseLibrary
        run: |
          pip install ${{ github.workspace }}/.

      - name: Setup Python DB module
        run: |
          pip install ${{ matrix.pip-install }}

      - name: Run Robot Framework tests using Psycopg
        if: matrix.py-db-module == 'psycopg2'
        working-directory: ./test
        run: |
          robot -d psycopg2/ -v DBModule:${{ matrix.py-db-module }} -v DBName:${{ matrix.py-db-module }} -v DBUser:${{ env.DB_USER }} -v DBPass:${{ env.DB_PASSWORD }} -v DBHost:${{ env.DB_HOST }} -v DBPort:${{ env.DB_PORT }} ${{ github.workspace }}/test/PostgresSQL_DB_Tests.robot

      - name: Upload Robot Logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: log-files
          path: ./test/